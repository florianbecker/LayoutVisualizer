name: integration

on: [push, pull_request]

jobs:

  Build:
    name: ${{matrix.name}} (${{matrix.config}})
    runs-on: ${{matrix.os}}

    env:
      CMAKE_GENERATOR: Ninja

    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-18.04-gcc-9,
          ubuntu-20.04-gcc-9,
          ubuntu-20.04-gcc-10,
          ubuntu-20.04-clang-8,
          ubuntu-20.04-clang-9,
          ubuntu-20.04-clang-10,
          ubuntu-20.04-clang-11,
          ubuntu-20.04-clang-12,
          windows-2016-msvc2017,
          windows-2019-msvc2019,
          macos-10.15-xcode-11.4,
          macos-10.15-xcode-12,
          macos-10.15-xcode-12.4,
          macos-11.0-x86_64
        ]
        config: [Debug, Release]
        include:
          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: 9

          - name: ubuntu-20.04-gcc-9
            os: ubuntu-20.04
            compiler: gcc
            version: 9

          - name: ubuntu-20.04-gcc-10
            os: ubuntu-20.04
            compiler: gcc
            version: 10

          - name: ubuntu-20.04-clang-8
            os: ubuntu-20.04
            compiler: clang
            version: 8

          - name: ubuntu-20.04-clang-9
            os: ubuntu-20.04
            compiler: clang
            version: 9

          - name: ubuntu-20.04-clang-10
            os: ubuntu-20.04
            compiler: clang
            version: 10

          - name: ubuntu-20.04-clang-11
            os: ubuntu-20.04
            compiler: clang
            version: 11

          - name: ubuntu-20.04-clang-12
            os: ubuntu-20.04
            compiler: clang
            version: 12

          - name: windows-2016-msvc2017
            os: windows-2016
            compiler: cl
            version: Visual Studio 15 2017 Win64
            version2: 2017
            qtversion: 5.12.9

          - name: windows-2019-msvc2019
            os: windows-2019
            compiler: cl
            version: Visual Studio 16 2019
            version2: 2019
            qtversion: 5.15.2

          - name: macos-10.15-xcode-11.4
            os: macos-10.15
            compiler: xcode
            version: 11.4

          - name: macos-10.15-xcode-12
            os: macos-10.15
            compiler: xcode
            version: 12

          - name: macos-10.15-xcode-12.4
            os: macos-10.15
            compiler: xcode
            version: 12.4

          - name: macos-11.0-x86_64
            os: macos-latest
            compiler: xcode
            version: 12.2
            cmake: -DCMAKE_OSX_ARCHITECTURES=x86_64

#          - name: macos-11.0-arm64
#            os: macos-11.0
#            compiler: xcode
#            version: 12.2
#            cmake: -DCMAKE_OSX_ARCHITECTURES=arm64

    steps:
      - uses: actions/checkout@v2

      - name: Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -

            if [ "${{matrix.compiler}}" = "clang" ] && [ "${{matrix.version}}" = "11" ]; then
              sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main"
              sudo apt-get update
            fi

            if [ "${{matrix.compiler}}" = "clang" ] && [ "${{matrix.version}}" = "12" ]; then
              sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main"
              sudo apt-get update
            fi

            sudo apt-get install -y ninja-build
            sudo apt-get install -y qtbase5-dev

            if [ "${{matrix.compiler}}" = "gcc" ]; then
              sudo apt-get install -y g++-${{matrix.version}}
              echo "CC=gcc-${{matrix.version}}" >> $GITHUB_ENV
              echo "CXX=g++-${{matrix.version}}" >> $GITHUB_ENV
            else
              sudo apt-get install -y clang-${{matrix.version}}
              echo "CC=clang-${{matrix.version}}" >> $GITHUB_ENV
              echo "CXX=clang++-${{matrix.version}}" >> $GITHUB_ENV
            fi

      - name: Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
            brew install ninja
            brew install qt5

            if [ "${{matrix.compiler}}" = "gcc" ]; then
              brew install gcc@${{matrix.version}}
              echo "CC=gcc-${{matrix.version}}" >> $GITHUB_ENV
              echo "CXX=g++-${{matrix.version}}" >> $GITHUB_ENV
            fi
            if [ "${{matrix.compiler}}" = "xcode" ]; then
              ls -ls /Applications/
              sudo xcode-select -switch /Applications/Xcode_${{matrix.version}}.app
              echo "CC=clang" >> $GITHUB_ENV
              echo "CXX=clang++" >> $GITHUB_ENV
            fi
            echo "Qt5_DIR=/usr/local/opt/qt/lib/cmake" >> $GITHUB_ENV

      - name: Install Qt
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v2
        with:
          version: '${{matrix.qtversion}}'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc${{matrix.version2}}_64'
          install-deps: 'true'
          cached: 'false'
          aqtversion: '==0.11.1'
          py7zrversion: '==0.11.3'
          extra: '--external 7z'

      - name: Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
            if ( "${{matrix.compiler}}" -eq "gcc" ) {
              choco install gcc --global
              echo "CC=gcc" >> $Env:GITHUB_ENV
              echo "CXX=g++" >> $Env:GITHUB_ENV
            }
            elseif ( "${{matrix.compiler}}".StartsWith( "clang" ) ) {
              choco install llvm --global
              echo "CC=clang" >> $Env:GITHUB_ENV
              echo "CXX=clang++" >> $Env:GITHUB_ENV
            }
            echo "Qt5_DIR=/${{runner.workspace}}/Qt/${{matrix.qtversion}}/lib/cmake" >> $GITHUB_ENV

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'cpp'

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake (Unix)
        if: runner.os == 'macOS' || runner.os == 'Linux'
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.config}} ${{matrix.cmake}}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{runner.workspace}}/build
        run: cmake $Env:GITHUB_WORKSPACE -G"${{matrix.version}}" -DCMAKE_BUILD_TYPE=${{matrix.config}}

      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{matrix.config}}

      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: ctest -C ${{matrix.config}}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
