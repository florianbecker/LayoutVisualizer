name: integration

on: [push, pull_request]

jobs:

  Build:
    name: ${{matrix.name}} (${{matrix.config}})
    runs-on: ${{matrix.os}}

    env:
      CMAKE_GENERATOR: Ninja

    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-18.04-gcc-9,
          ubuntu-20.04-gcc-9,
          ubuntu-20.04-gcc-10,
          ubuntu-22.04-gcc-11,
          ubuntu-22.04-gcc-12,
#          ubuntu-20.04-clang-8,
#          ubuntu-20.04-clang-9,
#          ubuntu-20.04-clang-10,
          ubuntu-22.04-clang-11,
          ubuntu-22.04-clang-12,
          ubuntu-22.04-clang-13,
          ubuntu-22.04-clang-14,
          windows-2019-msvc2019,
#          windows-2019-clang,
#          windows-2019-gcc,
          windows-2022-msvc2022,
          macos-11.0-xcode-12-x86_64,
#          macos-11.0-xcode-12-arm64,
          macos-11.0-xcode-13-x86_64,
#          macos-11.0-xcode-13-arm64
#          macos-12.0-xcode-14-x86_64,
#          macos-12.0-xcode-14-arm64
        ]
        config: [Debug, Release]
        include:
          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: 9

          - name: ubuntu-20.04-gcc-9
            os: ubuntu-20.04
            compiler: gcc
            version: 9

          - name: ubuntu-20.04-gcc-10
            os: ubuntu-20.04
            compiler: gcc
            version: 10

          - name: ubuntu-22.04-gcc-11
            os: ubuntu-22.04
            compiler: gcc
            version: 11

          - name: ubuntu-22.04-gcc-12
            os: ubuntu-22.04
            compiler: gcc
            version: 12

# Some moc'ing foo...
#          - name: ubuntu-20.04-clang-8
#            os: ubuntu-20.04
#            compiler: clang
#            version: 8

# Some moc'ing foo...
#          - name: ubuntu-20.04-clang-9
#            os: ubuntu-20.04
#            compiler: clang
#            version: 9

# Some moc'ing foo...
#          - name: ubuntu-20.04-clang-10
#            os: ubuntu-20.04
#            compiler: clang
#            version: 10

          - name: ubuntu-22.04-clang-11
            os: ubuntu-22.04
            compiler: clang
            version: 11

          - name: ubuntu-22.04-clang-12
            os: ubuntu-22.04
            compiler: clang
            version: 12

          - name: ubuntu-22.04-clang-13
            os: ubuntu-22.04
            compiler: clang
            version: 13

          - name: ubuntu-22.04-clang-14
            os: ubuntu-22.04
            compiler: clang
            version: 14

          - name: windows-2019-msvc2019
            os: windows-2019
            compiler: cl
            version: Visual Studio 16 2019
            version2: 2019
            qtversion: 5.15.2

# Build must be inspected
#          - name: windows-2019-clang
#            os: windows-2019
#            compiler: clang
#            version: Ninja

# gcc-8.1 contains a bug with filesystem
#          - name: windows-2019-gcc
#            os: windows-2019
#            compiler: gcc
#            version: Ninja

          - name: windows-2022-msvc2022
            os: windows-2022
            compiler: cl
            version: Visual Studio 17 2022
            version2: 2019
            qtversion: 5.15.2

          - name: macos-11.0-xcode-12-x86_64
            os: macos-11.0
            compiler: xcode
            version: "12.5.1"
            cmake: -DCMAKE_OSX_ARCHITECTURES:STRING=x86_64

#          - name: macos-11.0-xcode-12-arm64
#            os: macos-11.0
#            compiler: xcode
#            version: "12.5.1"
#            cmake: -DCMAKE_OSX_ARCHITECTURES:STRING=arm64

          - name: macos-11.0-xcode-13-x86_64
            os: macos-11.0
            compiler: xcode
            version: "13.1"
            cmake: -DCMAKE_OSX_ARCHITECTURES:STRING=x86_64

#          - name: macos-11.0-xcode-13-arm64
#            os: macos-11.0
#            compiler: xcode
#            version: "13.1"
#            cmake: -DCMAKE_OSX_ARCHITECTURES:STRING=arm64

# Not yet useable
#          - name: macos-12.0-xcode-14-x86_64
#            os: macos-12.0
#            compiler: xcode
#            version: "14.0"
#            cmake: -DCMAKE_OSX_ARCHITECTURES:STRING=x86_64

# Not yet useable
#          - name: macos-12.0-xcode-14-arm64
#            os: macos-12.0
#            compiler: xcode
#            version: "14.0"
#            cmake: -DCMAKE_OSX_ARCHITECTURES:STRING=arm64

    steps:
      - uses: actions/checkout@v3

      - name: Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
            sudo apt update
            sudo apt install -y ninja-build
            sudo apt install -y qtbase5-dev

            if [ "${{matrix.compiler}}" = "gcc" ]; then
              sudo apt install -y g++-${{matrix.version}}
              echo "CC=gcc-${{matrix.version}}" >> $GITHUB_ENV
              echo "CXX=g++-${{matrix.version}}" >> $GITHUB_ENV
            else
              sudo apt install -y clang-${{matrix.version}}
              echo "CC=clang-${{matrix.version}}" >> $GITHUB_ENV
              echo "CXX=clang++-${{matrix.version}}" >> $GITHUB_ENV
            fi

      - name: Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
            brew install ninja
            brew install qt5

            if [ "${{matrix.compiler}}" = "gcc" ]; then
              brew install gcc@${{matrix.version}}
              echo "CC=gcc-${{matrix.version}}" >> $GITHUB_ENV
              echo "CXX=g++-${{matrix.version}}" >> $GITHUB_ENV
            fi
            if [ "${{matrix.compiler}}" = "xcode" ]; then
              ls -ls /Applications/
              sudo xcode-select -switch /Applications/Xcode_${{matrix.version}}.app
              echo "CC=clang" >> $GITHUB_ENV
              echo "CXX=clang++" >> $GITHUB_ENV
            fi

            echo "QT_DIR=/usr/local/opt/qt@5/lib/cmake" >> $GITHUB_ENV
            echo "Qt5_DIR=/usr/local/opt/qt@5/lib/cmake" >> $GITHUB_ENV

      - name: Install Qt
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v2
        with:
          version: '${{matrix.qtversion}}'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc${{matrix.version2}}_64'
          install-deps: 'true'
          cached: 'false'
          aqtversion: '==0.11.1'
          py7zrversion: '==0.11.3'
          extra: '--external 7z'

      - name: Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
            if ( "${{matrix.compiler}}" -eq "gcc" ) {
              choco install gcc --global
              echo "CC=gcc" >> $Env:GITHUB_ENV
              echo "CXX=g++" >> $Env:GITHUB_ENV
            }
            elseif ( "${{matrix.compiler}}".StartsWith( "clang" ) ) {
              choco install llvm --global
              echo "CC=clang" >> $Env:GITHUB_ENV
              echo "CXX=clang++" >> $Env:GITHUB_ENV
            }
            echo "Qt5_DIR=/${{runner.workspace}}/Qt/${{matrix.qtversion}}/lib/cmake" >> $GITHUB_ENV

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'cpp'

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake (Unix)
        if: runner.os == 'macOS' || runner.os == 'Linux'
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE:STRING=${{matrix.config}} ${{matrix.cmake}}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{runner.workspace}}/build
        run: cmake $Env:GITHUB_WORKSPACE -G"${{matrix.version}}" -DCMAKE_BUILD_TYPE:STRING=${{matrix.config}}

      - name: Build
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{matrix.config}}

      - name: Test
        working-directory: ${{runner.workspace}}/build
        run: ctest --output-on-failure -C ${{matrix.config}}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
